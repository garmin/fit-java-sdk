/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.133.0Release
// Tag = production/release/21.133.0-0-g6002091
/////////////////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;



public class AadAccelFeaturesMesg extends Mesg   {

    
    public static final int TimestampFieldNum = 253;
    
    public static final int TimeFieldNum = 0;
    
    public static final int EnergyTotalFieldNum = 1;
    
    public static final int ZeroCrossCntFieldNum = 2;
    
    public static final int InstanceFieldNum = 3;
    
    public static final int TimeAboveThresholdFieldNum = 4;
    

    protected static final  Mesg aadAccelFeaturesMesg;
    static {
        // aad_accel_features
        aadAccelFeaturesMesg = new Mesg("aad_accel_features", MesgNum.AAD_ACCEL_FEATURES);
        aadAccelFeaturesMesg.addField(new Field("timestamp", TimestampFieldNum, 134, 1, 0, "", false, Profile.Type.DATE_TIME));
        
        aadAccelFeaturesMesg.addField(new Field("time", TimeFieldNum, 132, 1, 0, "s", false, Profile.Type.UINT16));
        
        aadAccelFeaturesMesg.addField(new Field("energy_total", EnergyTotalFieldNum, 134, 1, 0, "", false, Profile.Type.UINT32));
        
        aadAccelFeaturesMesg.addField(new Field("zero_cross_cnt", ZeroCrossCntFieldNum, 132, 1, 0, "", false, Profile.Type.UINT16));
        
        aadAccelFeaturesMesg.addField(new Field("instance", InstanceFieldNum, 2, 1, 0, "", false, Profile.Type.UINT8));
        
        aadAccelFeaturesMesg.addField(new Field("time_above_threshold", TimeAboveThresholdFieldNum, 132, 25, 0, "s", false, Profile.Type.UINT16));
        
    }

    public AadAccelFeaturesMesg() {
        super(Factory.createMesg(MesgNum.AAD_ACCEL_FEATURES));
    }

    public AadAccelFeaturesMesg(final Mesg mesg) {
        super(mesg);
    }


    /**
     * Get timestamp field
     *
     * @return timestamp
     */
    public DateTime getTimestamp() {
        return timestampToDateTime(getFieldLongValue(253, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD));
    }

    /**
     * Set timestamp field
     *
     * @param timestamp The new timestamp value to be set
     */
    public void setTimestamp(DateTime timestamp) {
        setFieldValue(253, 0, timestamp.getTimestamp(), Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get time field
     * Units: s
     * Comment: Time interval length in seconds
     *
     * @return time
     */
    public Integer getTime() {
        return getFieldIntegerValue(0, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set time field
     * Units: s
     * Comment: Time interval length in seconds
     *
     * @param time The new time value to be set
     */
    public void setTime(Integer time) {
        setFieldValue(0, 0, time, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get energy_total field
     * Comment: Total accelerometer energy in the interval
     *
     * @return energy_total
     */
    public Long getEnergyTotal() {
        return getFieldLongValue(1, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set energy_total field
     * Comment: Total accelerometer energy in the interval
     *
     * @param energyTotal The new energyTotal value to be set
     */
    public void setEnergyTotal(Long energyTotal) {
        setFieldValue(1, 0, energyTotal, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get zero_cross_cnt field
     * Comment: Count of zero crossings
     *
     * @return zero_cross_cnt
     */
    public Integer getZeroCrossCnt() {
        return getFieldIntegerValue(2, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set zero_cross_cnt field
     * Comment: Count of zero crossings
     *
     * @param zeroCrossCnt The new zeroCrossCnt value to be set
     */
    public void setZeroCrossCnt(Integer zeroCrossCnt) {
        setFieldValue(2, 0, zeroCrossCnt, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get instance field
     * Comment: Instance ID of zero crossing algorithm
     *
     * @return instance
     */
    public Short getInstance() {
        return getFieldShortValue(3, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set instance field
     * Comment: Instance ID of zero crossing algorithm
     *
     * @param instance The new instance value to be set
     */
    public void setInstance(Short instance) {
        setFieldValue(3, 0, instance, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get time_above_threshold field
     * Units: s
     * Comment: Total accelerometer time above threshold in the interval
     *
     * @return time_above_threshold
     */
    public Float getTimeAboveThreshold() {
        return getFieldFloatValue(4, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set time_above_threshold field
     * Units: s
     * Comment: Total accelerometer time above threshold in the interval
     *
     * @param timeAboveThreshold The new timeAboveThreshold value to be set
     */
    public void setTimeAboveThreshold(Float timeAboveThreshold) {
        setFieldValue(4, 0, timeAboveThreshold, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

}
