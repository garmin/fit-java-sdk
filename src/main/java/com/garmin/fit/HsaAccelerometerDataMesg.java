/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.133.0Release
// Tag = production/release/21.133.0-0-g6002091
/////////////////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;



public class HsaAccelerometerDataMesg extends Mesg   {

    
    public static final int TimestampFieldNum = 253;
    
    public static final int TimestampMsFieldNum = 0;
    
    public static final int SamplingIntervalFieldNum = 1;
    
    public static final int AccelXFieldNum = 2;
    
    public static final int AccelYFieldNum = 3;
    
    public static final int AccelZFieldNum = 4;
    
    public static final int Timestamp32kFieldNum = 5;
    

    protected static final  Mesg hsaAccelerometerDataMesg;
    static {
        // hsa_accelerometer_data
        hsaAccelerometerDataMesg = new Mesg("hsa_accelerometer_data", MesgNum.HSA_ACCELEROMETER_DATA);
        hsaAccelerometerDataMesg.addField(new Field("timestamp", TimestampFieldNum, 134, 1, 0, "s", false, Profile.Type.DATE_TIME));
        
        hsaAccelerometerDataMesg.addField(new Field("timestamp_ms", TimestampMsFieldNum, 132, 1, 0, "ms", false, Profile.Type.UINT16));
        
        hsaAccelerometerDataMesg.addField(new Field("sampling_interval", SamplingIntervalFieldNum, 132, 1, 0, "ms", false, Profile.Type.UINT16));
        
        hsaAccelerometerDataMesg.addField(new Field("accel_x", AccelXFieldNum, 131, 1.024, 0, "mG", false, Profile.Type.SINT16));
        
        hsaAccelerometerDataMesg.addField(new Field("accel_y", AccelYFieldNum, 131, 1.024, 0, "mG", false, Profile.Type.SINT16));
        
        hsaAccelerometerDataMesg.addField(new Field("accel_z", AccelZFieldNum, 131, 1.024, 0, "mG", false, Profile.Type.SINT16));
        
        hsaAccelerometerDataMesg.addField(new Field("timestamp_32k", Timestamp32kFieldNum, 134, 1, 0, "", false, Profile.Type.UINT32));
        
    }

    public HsaAccelerometerDataMesg() {
        super(Factory.createMesg(MesgNum.HSA_ACCELEROMETER_DATA));
    }

    public HsaAccelerometerDataMesg(final Mesg mesg) {
        super(mesg);
    }


    /**
     * Get timestamp field
     * Units: s
     *
     * @return timestamp
     */
    public DateTime getTimestamp() {
        return timestampToDateTime(getFieldLongValue(253, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD));
    }

    /**
     * Set timestamp field
     * Units: s
     *
     * @param timestamp The new timestamp value to be set
     */
    public void setTimestamp(DateTime timestamp) {
        setFieldValue(253, 0, timestamp.getTimestamp(), Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get timestamp_ms field
     * Units: ms
     * Comment: Millisecond resolution of the timestamp
     *
     * @return timestamp_ms
     */
    public Integer getTimestampMs() {
        return getFieldIntegerValue(0, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set timestamp_ms field
     * Units: ms
     * Comment: Millisecond resolution of the timestamp
     *
     * @param timestampMs The new timestampMs value to be set
     */
    public void setTimestampMs(Integer timestampMs) {
        setFieldValue(0, 0, timestampMs, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get sampling_interval field
     * Units: ms
     * Comment: Sampling Interval in Milliseconds
     *
     * @return sampling_interval
     */
    public Integer getSamplingInterval() {
        return getFieldIntegerValue(1, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set sampling_interval field
     * Units: ms
     * Comment: Sampling Interval in Milliseconds
     *
     * @param samplingInterval The new samplingInterval value to be set
     */
    public void setSamplingInterval(Integer samplingInterval) {
        setFieldValue(1, 0, samplingInterval, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    public Float[] getAccelX() {
        
        return getFieldFloatValues(2, Fit.SUBFIELD_INDEX_MAIN_FIELD);
        
    }

    /**
     * @return number of accel_x
     */
    public int getNumAccelX() {
        return getNumFieldValues(2, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get accel_x field
     * Units: mG
     * Comment: X-Axis Measurement
     *
     * @param index of accel_x
     * @return accel_x
     */
    public Float getAccelX(int index) {
        return getFieldFloatValue(2, index, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set accel_x field
     * Units: mG
     * Comment: X-Axis Measurement
     *
     * @param index of accel_x
     * @param accelX The new accelX value to be set
     */
    public void setAccelX(int index, Float accelX) {
        setFieldValue(2, index, accelX, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    public Float[] getAccelY() {
        
        return getFieldFloatValues(3, Fit.SUBFIELD_INDEX_MAIN_FIELD);
        
    }

    /**
     * @return number of accel_y
     */
    public int getNumAccelY() {
        return getNumFieldValues(3, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get accel_y field
     * Units: mG
     * Comment: Y-Axis Measurement
     *
     * @param index of accel_y
     * @return accel_y
     */
    public Float getAccelY(int index) {
        return getFieldFloatValue(3, index, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set accel_y field
     * Units: mG
     * Comment: Y-Axis Measurement
     *
     * @param index of accel_y
     * @param accelY The new accelY value to be set
     */
    public void setAccelY(int index, Float accelY) {
        setFieldValue(3, index, accelY, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    public Float[] getAccelZ() {
        
        return getFieldFloatValues(4, Fit.SUBFIELD_INDEX_MAIN_FIELD);
        
    }

    /**
     * @return number of accel_z
     */
    public int getNumAccelZ() {
        return getNumFieldValues(4, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get accel_z field
     * Units: mG
     * Comment: Z-Axis Measurement
     *
     * @param index of accel_z
     * @return accel_z
     */
    public Float getAccelZ(int index) {
        return getFieldFloatValue(4, index, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set accel_z field
     * Units: mG
     * Comment: Z-Axis Measurement
     *
     * @param index of accel_z
     * @param accelZ The new accelZ value to be set
     */
    public void setAccelZ(int index, Float accelZ) {
        setFieldValue(4, index, accelZ, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get timestamp_32k field
     * Comment: 32 kHz timestamp
     *
     * @return timestamp_32k
     */
    public Long getTimestamp32k() {
        return getFieldLongValue(5, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set timestamp_32k field
     * Comment: 32 kHz timestamp
     *
     * @param timestamp32k The new timestamp32k value to be set
     */
    public void setTimestamp32k(Long timestamp32k) {
        setFieldValue(5, 0, timestamp32k, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

}
