/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.133.0Release
// Tag = production/release/21.133.0-0-g6002091
/////////////////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;



public class HsaBodyBatteryDataMesg extends Mesg   {

    
    public static final int TimestampFieldNum = 253;
    
    public static final int ProcessingIntervalFieldNum = 0;
    
    public static final int LevelFieldNum = 1;
    
    public static final int ChargedFieldNum = 2;
    
    public static final int UnchargedFieldNum = 3;
    

    protected static final  Mesg hsaBodyBatteryDataMesg;
    static {
        // hsa_body_battery_data
        hsaBodyBatteryDataMesg = new Mesg("hsa_body_battery_data", MesgNum.HSA_BODY_BATTERY_DATA);
        hsaBodyBatteryDataMesg.addField(new Field("timestamp", TimestampFieldNum, 134, 1, 0, "s", false, Profile.Type.DATE_TIME));
        
        hsaBodyBatteryDataMesg.addField(new Field("processing_interval", ProcessingIntervalFieldNum, 132, 1, 0, "s", false, Profile.Type.UINT16));
        
        hsaBodyBatteryDataMesg.addField(new Field("level", LevelFieldNum, 1, 1, 0, "percent", false, Profile.Type.SINT8));
        
        hsaBodyBatteryDataMesg.addField(new Field("charged", ChargedFieldNum, 131, 1, 0, "", false, Profile.Type.SINT16));
        
        hsaBodyBatteryDataMesg.addField(new Field("uncharged", UnchargedFieldNum, 131, 1, 0, "", false, Profile.Type.SINT16));
        
    }

    public HsaBodyBatteryDataMesg() {
        super(Factory.createMesg(MesgNum.HSA_BODY_BATTERY_DATA));
    }

    public HsaBodyBatteryDataMesg(final Mesg mesg) {
        super(mesg);
    }


    /**
     * Get timestamp field
     * Units: s
     *
     * @return timestamp
     */
    public DateTime getTimestamp() {
        return timestampToDateTime(getFieldLongValue(253, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD));
    }

    /**
     * Set timestamp field
     * Units: s
     *
     * @param timestamp The new timestamp value to be set
     */
    public void setTimestamp(DateTime timestamp) {
        setFieldValue(253, 0, timestamp.getTimestamp(), Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get processing_interval field
     * Units: s
     * Comment: Processing interval length in seconds
     *
     * @return processing_interval
     */
    public Integer getProcessingInterval() {
        return getFieldIntegerValue(0, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set processing_interval field
     * Units: s
     * Comment: Processing interval length in seconds
     *
     * @param processingInterval The new processingInterval value to be set
     */
    public void setProcessingInterval(Integer processingInterval) {
        setFieldValue(0, 0, processingInterval, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    public Byte[] getLevel() {
        
        return getFieldByteValues(1, Fit.SUBFIELD_INDEX_MAIN_FIELD);
        
    }

    /**
     * @return number of level
     */
    public int getNumLevel() {
        return getNumFieldValues(1, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get level field
     * Units: percent
     * Comment: Body battery level
     *
     * @param index of level
     * @return level
     */
    public Byte getLevel(int index) {
        return getFieldByteValue(1, index, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set level field
     * Units: percent
     * Comment: Body battery level
     *
     * @param index of level
     * @param level The new level value to be set
     */
    public void setLevel(int index, Byte level) {
        setFieldValue(1, index, level, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    public Short[] getCharged() {
        
        return getFieldShortValues(2, Fit.SUBFIELD_INDEX_MAIN_FIELD);
        
    }

    /**
     * @return number of charged
     */
    public int getNumCharged() {
        return getNumFieldValues(2, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get charged field
     * Comment: Body battery charged value
     *
     * @param index of charged
     * @return charged
     */
    public Short getCharged(int index) {
        return getFieldShortValue(2, index, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set charged field
     * Comment: Body battery charged value
     *
     * @param index of charged
     * @param charged The new charged value to be set
     */
    public void setCharged(int index, Short charged) {
        setFieldValue(2, index, charged, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    public Short[] getUncharged() {
        
        return getFieldShortValues(3, Fit.SUBFIELD_INDEX_MAIN_FIELD);
        
    }

    /**
     * @return number of uncharged
     */
    public int getNumUncharged() {
        return getNumFieldValues(3, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get uncharged field
     * Comment: Body battery uncharged value
     *
     * @param index of uncharged
     * @return uncharged
     */
    public Short getUncharged(int index) {
        return getFieldShortValue(3, index, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set uncharged field
     * Comment: Body battery uncharged value
     *
     * @param index of uncharged
     * @param uncharged The new uncharged value to be set
     */
    public void setUncharged(int index, Short uncharged) {
        setFieldValue(3, index, uncharged, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

}
