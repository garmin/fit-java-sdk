/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.133.0Release
// Tag = production/release/21.133.0-0-g6002091
/////////////////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;



public class HsaSpo2DataMesg extends Mesg   {

    
    public static final int TimestampFieldNum = 253;
    
    public static final int ProcessingIntervalFieldNum = 0;
    
    public static final int ReadingSpo2FieldNum = 1;
    
    public static final int ConfidenceFieldNum = 2;
    

    protected static final  Mesg hsaSpo2DataMesg;
    static {
        // hsa_spo2_data
        hsaSpo2DataMesg = new Mesg("hsa_spo2_data", MesgNum.HSA_SPO2_DATA);
        hsaSpo2DataMesg.addField(new Field("timestamp", TimestampFieldNum, 134, 1, 0, "s", false, Profile.Type.DATE_TIME));
        
        hsaSpo2DataMesg.addField(new Field("processing_interval", ProcessingIntervalFieldNum, 132, 1, 0, "s", false, Profile.Type.UINT16));
        
        hsaSpo2DataMesg.addField(new Field("reading_spo2", ReadingSpo2FieldNum, 2, 1, 0, "percent", false, Profile.Type.UINT8));
        
        hsaSpo2DataMesg.addField(new Field("confidence", ConfidenceFieldNum, 2, 1, 0, "", false, Profile.Type.UINT8));
        
    }

    public HsaSpo2DataMesg() {
        super(Factory.createMesg(MesgNum.HSA_SPO2_DATA));
    }

    public HsaSpo2DataMesg(final Mesg mesg) {
        super(mesg);
    }


    /**
     * Get timestamp field
     * Units: s
     *
     * @return timestamp
     */
    public DateTime getTimestamp() {
        return timestampToDateTime(getFieldLongValue(253, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD));
    }

    /**
     * Set timestamp field
     * Units: s
     *
     * @param timestamp The new timestamp value to be set
     */
    public void setTimestamp(DateTime timestamp) {
        setFieldValue(253, 0, timestamp.getTimestamp(), Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get processing_interval field
     * Units: s
     * Comment: Processing interval length in seconds
     *
     * @return processing_interval
     */
    public Integer getProcessingInterval() {
        return getFieldIntegerValue(0, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set processing_interval field
     * Units: s
     * Comment: Processing interval length in seconds
     *
     * @param processingInterval The new processingInterval value to be set
     */
    public void setProcessingInterval(Integer processingInterval) {
        setFieldValue(0, 0, processingInterval, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    public Short[] getReadingSpo2() {
        
        return getFieldShortValues(1, Fit.SUBFIELD_INDEX_MAIN_FIELD);
        
    }

    /**
     * @return number of reading_spo2
     */
    public int getNumReadingSpo2() {
        return getNumFieldValues(1, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get reading_spo2 field
     * Units: percent
     * Comment: SpO2 Reading
     *
     * @param index of reading_spo2
     * @return reading_spo2
     */
    public Short getReadingSpo2(int index) {
        return getFieldShortValue(1, index, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set reading_spo2 field
     * Units: percent
     * Comment: SpO2 Reading
     *
     * @param index of reading_spo2
     * @param readingSpo2 The new readingSpo2 value to be set
     */
    public void setReadingSpo2(int index, Short readingSpo2) {
        setFieldValue(1, index, readingSpo2, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    public Short[] getConfidence() {
        
        return getFieldShortValues(2, Fit.SUBFIELD_INDEX_MAIN_FIELD);
        
    }

    /**
     * @return number of confidence
     */
    public int getNumConfidence() {
        return getNumFieldValues(2, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get confidence field
     * Comment: SpO2 Confidence
     *
     * @param index of confidence
     * @return confidence
     */
    public Short getConfidence(int index) {
        return getFieldShortValue(2, index, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set confidence field
     * Comment: SpO2 Confidence
     *
     * @param index of confidence
     * @param confidence The new confidence value to be set
     */
    public void setConfidence(int index, Short confidence) {
        setFieldValue(2, index, confidence, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

}
