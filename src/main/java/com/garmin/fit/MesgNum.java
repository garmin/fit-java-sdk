/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.133.0Release
// Tag = production/release/21.133.0-0-g6002091
/////////////////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;

import java.util.HashMap;
import java.util.Map;

public class MesgNum  {
    public static final int FILE_ID = 0;
    public static final int CAPABILITIES = 1;
    public static final int DEVICE_SETTINGS = 2;
    public static final int USER_PROFILE = 3;
    public static final int HRM_PROFILE = 4;
    public static final int SDM_PROFILE = 5;
    public static final int BIKE_PROFILE = 6;
    public static final int ZONES_TARGET = 7;
    public static final int HR_ZONE = 8;
    public static final int POWER_ZONE = 9;
    public static final int MET_ZONE = 10;
    public static final int SPORT = 12;
    public static final int GOAL = 15;
    public static final int SESSION = 18;
    public static final int LAP = 19;
    public static final int RECORD = 20;
    public static final int EVENT = 21;
    public static final int DEVICE_INFO = 23;
    public static final int WORKOUT = 26;
    public static final int WORKOUT_STEP = 27;
    public static final int SCHEDULE = 28;
    public static final int WEIGHT_SCALE = 30;
    public static final int COURSE = 31;
    public static final int COURSE_POINT = 32;
    public static final int TOTALS = 33;
    public static final int ACTIVITY = 34;
    public static final int SOFTWARE = 35;
    public static final int FILE_CAPABILITIES = 37;
    public static final int MESG_CAPABILITIES = 38;
    public static final int FIELD_CAPABILITIES = 39;
    public static final int FILE_CREATOR = 49;
    public static final int BLOOD_PRESSURE = 51;
    public static final int SPEED_ZONE = 53;
    public static final int MONITORING = 55;
    public static final int TRAINING_FILE = 72;
    public static final int HRV = 78;
    public static final int ANT_RX = 80;
    public static final int ANT_TX = 81;
    public static final int ANT_CHANNEL_ID = 82;
    public static final int LENGTH = 101;
    public static final int MONITORING_INFO = 103;
    public static final int PAD = 105;
    public static final int SLAVE_DEVICE = 106;
    public static final int CONNECTIVITY = 127;
    public static final int WEATHER_CONDITIONS = 128;
    public static final int WEATHER_ALERT = 129;
    public static final int CADENCE_ZONE = 131;
    public static final int HR = 132;
    public static final int SEGMENT_LAP = 142;
    public static final int MEMO_GLOB = 145;
    public static final int SEGMENT_ID = 148;
    public static final int SEGMENT_LEADERBOARD_ENTRY = 149;
    public static final int SEGMENT_POINT = 150;
    public static final int SEGMENT_FILE = 151;
    public static final int WORKOUT_SESSION = 158;
    public static final int WATCHFACE_SETTINGS = 159;
    public static final int GPS_METADATA = 160;
    public static final int CAMERA_EVENT = 161;
    public static final int TIMESTAMP_CORRELATION = 162;
    public static final int GYROSCOPE_DATA = 164;
    public static final int ACCELEROMETER_DATA = 165;
    public static final int THREE_D_SENSOR_CALIBRATION = 167;
    public static final int VIDEO_FRAME = 169;
    public static final int OBDII_DATA = 174;
    public static final int NMEA_SENTENCE = 177;
    public static final int AVIATION_ATTITUDE = 178;
    public static final int VIDEO = 184;
    public static final int VIDEO_TITLE = 185;
    public static final int VIDEO_DESCRIPTION = 186;
    public static final int VIDEO_CLIP = 187;
    public static final int OHR_SETTINGS = 188;
    public static final int EXD_SCREEN_CONFIGURATION = 200;
    public static final int EXD_DATA_FIELD_CONFIGURATION = 201;
    public static final int EXD_DATA_CONCEPT_CONFIGURATION = 202;
    public static final int FIELD_DESCRIPTION = 206;
    public static final int DEVELOPER_DATA_ID = 207;
    public static final int MAGNETOMETER_DATA = 208;
    public static final int BAROMETER_DATA = 209;
    public static final int ONE_D_SENSOR_CALIBRATION = 210;
    public static final int MONITORING_HR_DATA = 211;
    public static final int TIME_IN_ZONE = 216;
    public static final int SET = 225;
    public static final int STRESS_LEVEL = 227;
    public static final int MAX_MET_DATA = 229;
    public static final int DIVE_SETTINGS = 258;
    public static final int DIVE_GAS = 259;
    public static final int DIVE_ALARM = 262;
    public static final int EXERCISE_TITLE = 264;
    public static final int DIVE_SUMMARY = 268;
    public static final int SPO2_DATA = 269;
    public static final int SLEEP_LEVEL = 275;
    public static final int JUMP = 285;
    public static final int AAD_ACCEL_FEATURES = 289;
    public static final int BEAT_INTERVALS = 290;
    public static final int RESPIRATION_RATE = 297;
    public static final int HSA_ACCELEROMETER_DATA = 302;
    public static final int HSA_STEP_DATA = 304;
    public static final int HSA_SPO2_DATA = 305;
    public static final int HSA_STRESS_DATA = 306;
    public static final int HSA_RESPIRATION_DATA = 307;
    public static final int HSA_HEART_RATE_DATA = 308;
    public static final int SPLIT = 312;
    public static final int SPLIT_SUMMARY = 313;
    public static final int HSA_BODY_BATTERY_DATA = 314;
    public static final int HSA_EVENT = 315;
    public static final int CLIMB_PRO = 317;
    public static final int TANK_UPDATE = 319;
    public static final int TANK_SUMMARY = 323;
    public static final int SLEEP_ASSESSMENT = 346;
    public static final int HRV_STATUS_SUMMARY = 370;
    public static final int HRV_VALUE = 371;
    public static final int RAW_BBI = 372;
    public static final int DEVICE_AUX_BATTERY_INFO = 375;
    public static final int HSA_GYROSCOPE_DATA = 376;
    public static final int CHRONO_SHOT_SESSION = 387;
    public static final int CHRONO_SHOT_DATA = 388;
    public static final int HSA_CONFIGURATION_DATA = 389;
    public static final int DIVE_APNEA_ALARM = 393;
    public static final int HSA_WRIST_TEMPERATURE_DATA = 409; // Message number for the HSA wrist temperature data message
    public static final int MFG_RANGE_MIN = 0xFF00; // 0xFF00 - 0xFFFE reserved for manufacturer specific messages
    public static final int MFG_RANGE_MAX = 0xFFFE; // 0xFF00 - 0xFFFE reserved for manufacturer specific messages
    public static final int INVALID = Fit.UINT16_INVALID;

    private static final Map<Integer, String> stringMap;

    static {
        stringMap = new HashMap<Integer, String>();
        stringMap.put(FILE_ID, "FILE_ID");
        stringMap.put(CAPABILITIES, "CAPABILITIES");
        stringMap.put(DEVICE_SETTINGS, "DEVICE_SETTINGS");
        stringMap.put(USER_PROFILE, "USER_PROFILE");
        stringMap.put(HRM_PROFILE, "HRM_PROFILE");
        stringMap.put(SDM_PROFILE, "SDM_PROFILE");
        stringMap.put(BIKE_PROFILE, "BIKE_PROFILE");
        stringMap.put(ZONES_TARGET, "ZONES_TARGET");
        stringMap.put(HR_ZONE, "HR_ZONE");
        stringMap.put(POWER_ZONE, "POWER_ZONE");
        stringMap.put(MET_ZONE, "MET_ZONE");
        stringMap.put(SPORT, "SPORT");
        stringMap.put(GOAL, "GOAL");
        stringMap.put(SESSION, "SESSION");
        stringMap.put(LAP, "LAP");
        stringMap.put(RECORD, "RECORD");
        stringMap.put(EVENT, "EVENT");
        stringMap.put(DEVICE_INFO, "DEVICE_INFO");
        stringMap.put(WORKOUT, "WORKOUT");
        stringMap.put(WORKOUT_STEP, "WORKOUT_STEP");
        stringMap.put(SCHEDULE, "SCHEDULE");
        stringMap.put(WEIGHT_SCALE, "WEIGHT_SCALE");
        stringMap.put(COURSE, "COURSE");
        stringMap.put(COURSE_POINT, "COURSE_POINT");
        stringMap.put(TOTALS, "TOTALS");
        stringMap.put(ACTIVITY, "ACTIVITY");
        stringMap.put(SOFTWARE, "SOFTWARE");
        stringMap.put(FILE_CAPABILITIES, "FILE_CAPABILITIES");
        stringMap.put(MESG_CAPABILITIES, "MESG_CAPABILITIES");
        stringMap.put(FIELD_CAPABILITIES, "FIELD_CAPABILITIES");
        stringMap.put(FILE_CREATOR, "FILE_CREATOR");
        stringMap.put(BLOOD_PRESSURE, "BLOOD_PRESSURE");
        stringMap.put(SPEED_ZONE, "SPEED_ZONE");
        stringMap.put(MONITORING, "MONITORING");
        stringMap.put(TRAINING_FILE, "TRAINING_FILE");
        stringMap.put(HRV, "HRV");
        stringMap.put(ANT_RX, "ANT_RX");
        stringMap.put(ANT_TX, "ANT_TX");
        stringMap.put(ANT_CHANNEL_ID, "ANT_CHANNEL_ID");
        stringMap.put(LENGTH, "LENGTH");
        stringMap.put(MONITORING_INFO, "MONITORING_INFO");
        stringMap.put(PAD, "PAD");
        stringMap.put(SLAVE_DEVICE, "SLAVE_DEVICE");
        stringMap.put(CONNECTIVITY, "CONNECTIVITY");
        stringMap.put(WEATHER_CONDITIONS, "WEATHER_CONDITIONS");
        stringMap.put(WEATHER_ALERT, "WEATHER_ALERT");
        stringMap.put(CADENCE_ZONE, "CADENCE_ZONE");
        stringMap.put(HR, "HR");
        stringMap.put(SEGMENT_LAP, "SEGMENT_LAP");
        stringMap.put(MEMO_GLOB, "MEMO_GLOB");
        stringMap.put(SEGMENT_ID, "SEGMENT_ID");
        stringMap.put(SEGMENT_LEADERBOARD_ENTRY, "SEGMENT_LEADERBOARD_ENTRY");
        stringMap.put(SEGMENT_POINT, "SEGMENT_POINT");
        stringMap.put(SEGMENT_FILE, "SEGMENT_FILE");
        stringMap.put(WORKOUT_SESSION, "WORKOUT_SESSION");
        stringMap.put(WATCHFACE_SETTINGS, "WATCHFACE_SETTINGS");
        stringMap.put(GPS_METADATA, "GPS_METADATA");
        stringMap.put(CAMERA_EVENT, "CAMERA_EVENT");
        stringMap.put(TIMESTAMP_CORRELATION, "TIMESTAMP_CORRELATION");
        stringMap.put(GYROSCOPE_DATA, "GYROSCOPE_DATA");
        stringMap.put(ACCELEROMETER_DATA, "ACCELEROMETER_DATA");
        stringMap.put(THREE_D_SENSOR_CALIBRATION, "THREE_D_SENSOR_CALIBRATION");
        stringMap.put(VIDEO_FRAME, "VIDEO_FRAME");
        stringMap.put(OBDII_DATA, "OBDII_DATA");
        stringMap.put(NMEA_SENTENCE, "NMEA_SENTENCE");
        stringMap.put(AVIATION_ATTITUDE, "AVIATION_ATTITUDE");
        stringMap.put(VIDEO, "VIDEO");
        stringMap.put(VIDEO_TITLE, "VIDEO_TITLE");
        stringMap.put(VIDEO_DESCRIPTION, "VIDEO_DESCRIPTION");
        stringMap.put(VIDEO_CLIP, "VIDEO_CLIP");
        stringMap.put(OHR_SETTINGS, "OHR_SETTINGS");
        stringMap.put(EXD_SCREEN_CONFIGURATION, "EXD_SCREEN_CONFIGURATION");
        stringMap.put(EXD_DATA_FIELD_CONFIGURATION, "EXD_DATA_FIELD_CONFIGURATION");
        stringMap.put(EXD_DATA_CONCEPT_CONFIGURATION, "EXD_DATA_CONCEPT_CONFIGURATION");
        stringMap.put(FIELD_DESCRIPTION, "FIELD_DESCRIPTION");
        stringMap.put(DEVELOPER_DATA_ID, "DEVELOPER_DATA_ID");
        stringMap.put(MAGNETOMETER_DATA, "MAGNETOMETER_DATA");
        stringMap.put(BAROMETER_DATA, "BAROMETER_DATA");
        stringMap.put(ONE_D_SENSOR_CALIBRATION, "ONE_D_SENSOR_CALIBRATION");
        stringMap.put(MONITORING_HR_DATA, "MONITORING_HR_DATA");
        stringMap.put(TIME_IN_ZONE, "TIME_IN_ZONE");
        stringMap.put(SET, "SET");
        stringMap.put(STRESS_LEVEL, "STRESS_LEVEL");
        stringMap.put(MAX_MET_DATA, "MAX_MET_DATA");
        stringMap.put(DIVE_SETTINGS, "DIVE_SETTINGS");
        stringMap.put(DIVE_GAS, "DIVE_GAS");
        stringMap.put(DIVE_ALARM, "DIVE_ALARM");
        stringMap.put(EXERCISE_TITLE, "EXERCISE_TITLE");
        stringMap.put(DIVE_SUMMARY, "DIVE_SUMMARY");
        stringMap.put(SPO2_DATA, "SPO2_DATA");
        stringMap.put(SLEEP_LEVEL, "SLEEP_LEVEL");
        stringMap.put(JUMP, "JUMP");
        stringMap.put(AAD_ACCEL_FEATURES, "AAD_ACCEL_FEATURES");
        stringMap.put(BEAT_INTERVALS, "BEAT_INTERVALS");
        stringMap.put(RESPIRATION_RATE, "RESPIRATION_RATE");
        stringMap.put(HSA_ACCELEROMETER_DATA, "HSA_ACCELEROMETER_DATA");
        stringMap.put(HSA_STEP_DATA, "HSA_STEP_DATA");
        stringMap.put(HSA_SPO2_DATA, "HSA_SPO2_DATA");
        stringMap.put(HSA_STRESS_DATA, "HSA_STRESS_DATA");
        stringMap.put(HSA_RESPIRATION_DATA, "HSA_RESPIRATION_DATA");
        stringMap.put(HSA_HEART_RATE_DATA, "HSA_HEART_RATE_DATA");
        stringMap.put(SPLIT, "SPLIT");
        stringMap.put(SPLIT_SUMMARY, "SPLIT_SUMMARY");
        stringMap.put(HSA_BODY_BATTERY_DATA, "HSA_BODY_BATTERY_DATA");
        stringMap.put(HSA_EVENT, "HSA_EVENT");
        stringMap.put(CLIMB_PRO, "CLIMB_PRO");
        stringMap.put(TANK_UPDATE, "TANK_UPDATE");
        stringMap.put(TANK_SUMMARY, "TANK_SUMMARY");
        stringMap.put(SLEEP_ASSESSMENT, "SLEEP_ASSESSMENT");
        stringMap.put(HRV_STATUS_SUMMARY, "HRV_STATUS_SUMMARY");
        stringMap.put(HRV_VALUE, "HRV_VALUE");
        stringMap.put(RAW_BBI, "RAW_BBI");
        stringMap.put(DEVICE_AUX_BATTERY_INFO, "DEVICE_AUX_BATTERY_INFO");
        stringMap.put(HSA_GYROSCOPE_DATA, "HSA_GYROSCOPE_DATA");
        stringMap.put(CHRONO_SHOT_SESSION, "CHRONO_SHOT_SESSION");
        stringMap.put(CHRONO_SHOT_DATA, "CHRONO_SHOT_DATA");
        stringMap.put(HSA_CONFIGURATION_DATA, "HSA_CONFIGURATION_DATA");
        stringMap.put(DIVE_APNEA_ALARM, "DIVE_APNEA_ALARM");
        stringMap.put(HSA_WRIST_TEMPERATURE_DATA, "HSA_WRIST_TEMPERATURE_DATA");
        stringMap.put(MFG_RANGE_MIN, "MFG_RANGE_MIN");
        stringMap.put(MFG_RANGE_MAX, "MFG_RANGE_MAX");
    }


    /**
     * Retrieves the String Representation of the Value
     * @param value The enum constant
     * @return The name of this enum contsant
     */
    public static String getStringFromValue( Integer value ) {
        if( stringMap.containsKey( value ) ) {
            return stringMap.get( value );
        }

        return "";
    }

    /**
     * Returns the enum constant with the specified name.
     * @param value The enum string value
     * @return The enum constant or INVALID if unknown
     */
    public static Integer getValueFromString( String value ) {
        for( Map.Entry<Integer, String> entry : stringMap.entrySet() ) {
            if( entry.getValue().equals( value ) ) {
                return entry.getKey();
            }
        }

        return INVALID;
    }

}
