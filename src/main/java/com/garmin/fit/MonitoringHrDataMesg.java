/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.133.0Release
// Tag = production/release/21.133.0-0-g6002091
/////////////////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;



public class MonitoringHrDataMesg extends Mesg   {

    
    public static final int TimestampFieldNum = 253;
    
    public static final int RestingHeartRateFieldNum = 0;
    
    public static final int CurrentDayRestingHeartRateFieldNum = 1;
    

    protected static final  Mesg monitoringHrDataMesg;
    static {
        // monitoring_hr_data
        monitoringHrDataMesg = new Mesg("monitoring_hr_data", MesgNum.MONITORING_HR_DATA);
        monitoringHrDataMesg.addField(new Field("timestamp", TimestampFieldNum, 134, 1, 0, "s", false, Profile.Type.DATE_TIME));
        
        monitoringHrDataMesg.addField(new Field("resting_heart_rate", RestingHeartRateFieldNum, 2, 1, 0, "bpm", false, Profile.Type.UINT8));
        
        monitoringHrDataMesg.addField(new Field("current_day_resting_heart_rate", CurrentDayRestingHeartRateFieldNum, 2, 1, 0, "bpm", false, Profile.Type.UINT8));
        
    }

    public MonitoringHrDataMesg() {
        super(Factory.createMesg(MesgNum.MONITORING_HR_DATA));
    }

    public MonitoringHrDataMesg(final Mesg mesg) {
        super(mesg);
    }


    /**
     * Get timestamp field
     * Units: s
     * Comment: Must align to logging interval, for example, time must be 00:00:00 for daily log.
     *
     * @return timestamp
     */
    public DateTime getTimestamp() {
        return timestampToDateTime(getFieldLongValue(253, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD));
    }

    /**
     * Set timestamp field
     * Units: s
     * Comment: Must align to logging interval, for example, time must be 00:00:00 for daily log.
     *
     * @param timestamp The new timestamp value to be set
     */
    public void setTimestamp(DateTime timestamp) {
        setFieldValue(253, 0, timestamp.getTimestamp(), Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get resting_heart_rate field
     * Units: bpm
     * Comment: 7-day rolling average
     *
     * @return resting_heart_rate
     */
    public Short getRestingHeartRate() {
        return getFieldShortValue(0, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set resting_heart_rate field
     * Units: bpm
     * Comment: 7-day rolling average
     *
     * @param restingHeartRate The new restingHeartRate value to be set
     */
    public void setRestingHeartRate(Short restingHeartRate) {
        setFieldValue(0, 0, restingHeartRate, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get current_day_resting_heart_rate field
     * Units: bpm
     * Comment: RHR for today only. (Feeds into 7-day average)
     *
     * @return current_day_resting_heart_rate
     */
    public Short getCurrentDayRestingHeartRate() {
        return getFieldShortValue(1, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set current_day_resting_heart_rate field
     * Units: bpm
     * Comment: RHR for today only. (Feeds into 7-day average)
     *
     * @param currentDayRestingHeartRate The new currentDayRestingHeartRate value to be set
     */
    public void setCurrentDayRestingHeartRate(Short currentDayRestingHeartRate) {
        setFieldValue(1, 0, currentDayRestingHeartRate, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

}
