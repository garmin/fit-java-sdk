/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.133.0Release
// Tag = production/release/21.133.0-0-g6002091
/////////////////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;



public class RawBbiMesg extends Mesg   {

    
    public static final int TimestampFieldNum = 253;
    
    public static final int TimestampMsFieldNum = 0;
    
    public static final int DataFieldNum = 1;
    
    public static final int TimeFieldNum = 2;
    
    public static final int QualityFieldNum = 3;
    
    public static final int GapFieldNum = 4;
    

    protected static final  Mesg rawBbiMesg;
    static {int field_index = 0;
        // raw_bbi
        rawBbiMesg = new Mesg("raw_bbi", MesgNum.RAW_BBI);
        rawBbiMesg.addField(new Field("timestamp", TimestampFieldNum, 134, 1, 0, "", false, Profile.Type.DATE_TIME));
        field_index++;
        rawBbiMesg.addField(new Field("timestamp_ms", TimestampMsFieldNum, 132, 1, 0, "ms", false, Profile.Type.UINT16));
        field_index++;
        rawBbiMesg.addField(new Field("data", DataFieldNum, 132, 1, 0, "", false, Profile.Type.UINT16));
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(2, false, 14, 1, 0)); // time
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(3, false, 1, 1, 0)); // quality
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(4, false, 1, 1, 0)); // gap
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(2, false, 14, 1, 0)); // time
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(3, false, 1, 1, 0)); // quality
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(4, false, 1, 1, 0)); // gap
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(2, false, 14, 1, 0)); // time
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(3, false, 1, 1, 0)); // quality
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(4, false, 1, 1, 0)); // gap
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(2, false, 14, 1, 0)); // time
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(3, false, 1, 1, 0)); // quality
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(4, false, 1, 1, 0)); // gap
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(2, false, 14, 1, 0)); // time
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(3, false, 1, 1, 0)); // quality
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(4, false, 1, 1, 0)); // gap
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(2, false, 14, 1, 0)); // time
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(3, false, 1, 1, 0)); // quality
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(4, false, 1, 1, 0)); // gap
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(2, false, 14, 1, 0)); // time
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(3, false, 1, 1, 0)); // quality
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(4, false, 1, 1, 0)); // gap
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(2, false, 14, 1, 0)); // time
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(3, false, 1, 1, 0)); // quality
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(4, false, 1, 1, 0)); // gap
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(2, false, 14, 1, 0)); // time
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(3, false, 1, 1, 0)); // quality
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(4, false, 1, 1, 0)); // gap
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(2, false, 14, 1, 0)); // time
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(3, false, 1, 1, 0)); // quality
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(4, false, 1, 1, 0)); // gap
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(2, false, 14, 1, 0)); // time
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(3, false, 1, 1, 0)); // quality
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(4, false, 1, 1, 0)); // gap
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(2, false, 14, 1, 0)); // time
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(3, false, 1, 1, 0)); // quality
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(4, false, 1, 1, 0)); // gap
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(2, false, 14, 1, 0)); // time
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(3, false, 1, 1, 0)); // quality
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(4, false, 1, 1, 0)); // gap
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(2, false, 14, 1, 0)); // time
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(3, false, 1, 1, 0)); // quality
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(4, false, 1, 1, 0)); // gap
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(2, false, 14, 1, 0)); // time
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(3, false, 1, 1, 0)); // quality
        rawBbiMesg.fields.get(field_index).components.add(new FieldComponent(4, false, 1, 1, 0)); // gap
        field_index++;
        rawBbiMesg.addField(new Field("time", TimeFieldNum, 132, 1, 0, "ms", false, Profile.Type.UINT16));
        field_index++;
        rawBbiMesg.addField(new Field("quality", QualityFieldNum, 2, 1, 0, "", false, Profile.Type.UINT8));
        field_index++;
        rawBbiMesg.addField(new Field("gap", GapFieldNum, 2, 1, 0, "", false, Profile.Type.UINT8));
        field_index++;
    }

    public RawBbiMesg() {
        super(Factory.createMesg(MesgNum.RAW_BBI));
    }

    public RawBbiMesg(final Mesg mesg) {
        super(mesg);
    }


    /**
     * Get timestamp field
     *
     * @return timestamp
     */
    public DateTime getTimestamp() {
        return timestampToDateTime(getFieldLongValue(253, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD));
    }

    /**
     * Set timestamp field
     *
     * @param timestamp The new timestamp value to be set
     */
    public void setTimestamp(DateTime timestamp) {
        setFieldValue(253, 0, timestamp.getTimestamp(), Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get timestamp_ms field
     * Units: ms
     * Comment: ms since last overnight_raw_bbi message
     *
     * @return timestamp_ms
     */
    public Integer getTimestampMs() {
        return getFieldIntegerValue(0, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set timestamp_ms field
     * Units: ms
     * Comment: ms since last overnight_raw_bbi message
     *
     * @param timestampMs The new timestampMs value to be set
     */
    public void setTimestampMs(Integer timestampMs) {
        setFieldValue(0, 0, timestampMs, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    public Integer[] getData() {
        
        return getFieldIntegerValues(1, Fit.SUBFIELD_INDEX_MAIN_FIELD);
        
    }

    /**
     * @return number of data
     */
    public int getNumData() {
        return getNumFieldValues(1, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get data field
     * Comment: 1 bit for gap indicator, 1 bit for quality indicator, and 14 bits for Beat-to-Beat interval values in whole-integer millisecond resolution
     *
     * @param index of data
     * @return data
     */
    public Integer getData(int index) {
        return getFieldIntegerValue(1, index, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set data field
     * Comment: 1 bit for gap indicator, 1 bit for quality indicator, and 14 bits for Beat-to-Beat interval values in whole-integer millisecond resolution
     *
     * @param index of data
     * @param data The new data value to be set
     */
    public void setData(int index, Integer data) {
        setFieldValue(1, index, data, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    public Integer[] getTime() {
        
        return getFieldIntegerValues(2, Fit.SUBFIELD_INDEX_MAIN_FIELD);
        
    }

    /**
     * @return number of time
     */
    public int getNumTime() {
        return getNumFieldValues(2, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get time field
     * Units: ms
     * Comment: Array of millisecond times between beats
     *
     * @param index of time
     * @return time
     */
    public Integer getTime(int index) {
        return getFieldIntegerValue(2, index, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set time field
     * Units: ms
     * Comment: Array of millisecond times between beats
     *
     * @param index of time
     * @param time The new time value to be set
     */
    public void setTime(int index, Integer time) {
        setFieldValue(2, index, time, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    public Short[] getQuality() {
        
        return getFieldShortValues(3, Fit.SUBFIELD_INDEX_MAIN_FIELD);
        
    }

    /**
     * @return number of quality
     */
    public int getNumQuality() {
        return getNumFieldValues(3, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get quality field
     *
     * @param index of quality
     * @return quality
     */
    public Short getQuality(int index) {
        return getFieldShortValue(3, index, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set quality field
     *
     * @param index of quality
     * @param quality The new quality value to be set
     */
    public void setQuality(int index, Short quality) {
        setFieldValue(3, index, quality, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    public Short[] getGap() {
        
        return getFieldShortValues(4, Fit.SUBFIELD_INDEX_MAIN_FIELD);
        
    }

    /**
     * @return number of gap
     */
    public int getNumGap() {
        return getNumFieldValues(4, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get gap field
     *
     * @param index of gap
     * @return gap
     */
    public Short getGap(int index) {
        return getFieldShortValue(4, index, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set gap field
     *
     * @param index of gap
     * @param gap The new gap value to be set
     */
    public void setGap(int index, Short gap) {
        setFieldValue(4, index, gap, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

}
