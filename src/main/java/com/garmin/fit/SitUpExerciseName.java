/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.133.0Release
// Tag = production/release/21.133.0-0-g6002091
/////////////////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;

import java.util.HashMap;
import java.util.Map;

public class SitUpExerciseName  {
    public static final int ALTERNATING_SIT_UP = 0;
    public static final int WEIGHTED_ALTERNATING_SIT_UP = 1;
    public static final int BENT_KNEE_V_UP = 2;
    public static final int WEIGHTED_BENT_KNEE_V_UP = 3;
    public static final int BUTTERFLY_SIT_UP = 4;
    public static final int WEIGHTED_BUTTERFLY_SITUP = 5;
    public static final int CROSS_PUNCH_ROLL_UP = 6;
    public static final int WEIGHTED_CROSS_PUNCH_ROLL_UP = 7;
    public static final int CROSSED_ARMS_SIT_UP = 8;
    public static final int WEIGHTED_CROSSED_ARMS_SIT_UP = 9;
    public static final int GET_UP_SIT_UP = 10;
    public static final int WEIGHTED_GET_UP_SIT_UP = 11;
    public static final int HOVERING_SIT_UP = 12;
    public static final int WEIGHTED_HOVERING_SIT_UP = 13;
    public static final int KETTLEBELL_SIT_UP = 14;
    public static final int MEDICINE_BALL_ALTERNATING_V_UP = 15;
    public static final int MEDICINE_BALL_SIT_UP = 16;
    public static final int MEDICINE_BALL_V_UP = 17;
    public static final int MODIFIED_SIT_UP = 18;
    public static final int NEGATIVE_SIT_UP = 19;
    public static final int ONE_ARM_FULL_SIT_UP = 20;
    public static final int RECLINING_CIRCLE = 21;
    public static final int WEIGHTED_RECLINING_CIRCLE = 22;
    public static final int REVERSE_CURL_UP = 23;
    public static final int WEIGHTED_REVERSE_CURL_UP = 24;
    public static final int SINGLE_LEG_SWISS_BALL_JACKKNIFE = 25;
    public static final int WEIGHTED_SINGLE_LEG_SWISS_BALL_JACKKNIFE = 26;
    public static final int THE_TEASER = 27;
    public static final int THE_TEASER_WEIGHTED = 28;
    public static final int THREE_PART_ROLL_DOWN = 29;
    public static final int WEIGHTED_THREE_PART_ROLL_DOWN = 30;
    public static final int V_UP = 31;
    public static final int WEIGHTED_V_UP = 32;
    public static final int WEIGHTED_RUSSIAN_TWIST_ON_SWISS_BALL = 33;
    public static final int WEIGHTED_SIT_UP = 34;
    public static final int X_ABS = 35;
    public static final int WEIGHTED_X_ABS = 36;
    public static final int SIT_UP = 37;
    public static final int INVALID = Fit.UINT16_INVALID;

    private static final Map<Integer, String> stringMap;

    static {
        stringMap = new HashMap<Integer, String>();
        stringMap.put(ALTERNATING_SIT_UP, "ALTERNATING_SIT_UP");
        stringMap.put(WEIGHTED_ALTERNATING_SIT_UP, "WEIGHTED_ALTERNATING_SIT_UP");
        stringMap.put(BENT_KNEE_V_UP, "BENT_KNEE_V_UP");
        stringMap.put(WEIGHTED_BENT_KNEE_V_UP, "WEIGHTED_BENT_KNEE_V_UP");
        stringMap.put(BUTTERFLY_SIT_UP, "BUTTERFLY_SIT_UP");
        stringMap.put(WEIGHTED_BUTTERFLY_SITUP, "WEIGHTED_BUTTERFLY_SITUP");
        stringMap.put(CROSS_PUNCH_ROLL_UP, "CROSS_PUNCH_ROLL_UP");
        stringMap.put(WEIGHTED_CROSS_PUNCH_ROLL_UP, "WEIGHTED_CROSS_PUNCH_ROLL_UP");
        stringMap.put(CROSSED_ARMS_SIT_UP, "CROSSED_ARMS_SIT_UP");
        stringMap.put(WEIGHTED_CROSSED_ARMS_SIT_UP, "WEIGHTED_CROSSED_ARMS_SIT_UP");
        stringMap.put(GET_UP_SIT_UP, "GET_UP_SIT_UP");
        stringMap.put(WEIGHTED_GET_UP_SIT_UP, "WEIGHTED_GET_UP_SIT_UP");
        stringMap.put(HOVERING_SIT_UP, "HOVERING_SIT_UP");
        stringMap.put(WEIGHTED_HOVERING_SIT_UP, "WEIGHTED_HOVERING_SIT_UP");
        stringMap.put(KETTLEBELL_SIT_UP, "KETTLEBELL_SIT_UP");
        stringMap.put(MEDICINE_BALL_ALTERNATING_V_UP, "MEDICINE_BALL_ALTERNATING_V_UP");
        stringMap.put(MEDICINE_BALL_SIT_UP, "MEDICINE_BALL_SIT_UP");
        stringMap.put(MEDICINE_BALL_V_UP, "MEDICINE_BALL_V_UP");
        stringMap.put(MODIFIED_SIT_UP, "MODIFIED_SIT_UP");
        stringMap.put(NEGATIVE_SIT_UP, "NEGATIVE_SIT_UP");
        stringMap.put(ONE_ARM_FULL_SIT_UP, "ONE_ARM_FULL_SIT_UP");
        stringMap.put(RECLINING_CIRCLE, "RECLINING_CIRCLE");
        stringMap.put(WEIGHTED_RECLINING_CIRCLE, "WEIGHTED_RECLINING_CIRCLE");
        stringMap.put(REVERSE_CURL_UP, "REVERSE_CURL_UP");
        stringMap.put(WEIGHTED_REVERSE_CURL_UP, "WEIGHTED_REVERSE_CURL_UP");
        stringMap.put(SINGLE_LEG_SWISS_BALL_JACKKNIFE, "SINGLE_LEG_SWISS_BALL_JACKKNIFE");
        stringMap.put(WEIGHTED_SINGLE_LEG_SWISS_BALL_JACKKNIFE, "WEIGHTED_SINGLE_LEG_SWISS_BALL_JACKKNIFE");
        stringMap.put(THE_TEASER, "THE_TEASER");
        stringMap.put(THE_TEASER_WEIGHTED, "THE_TEASER_WEIGHTED");
        stringMap.put(THREE_PART_ROLL_DOWN, "THREE_PART_ROLL_DOWN");
        stringMap.put(WEIGHTED_THREE_PART_ROLL_DOWN, "WEIGHTED_THREE_PART_ROLL_DOWN");
        stringMap.put(V_UP, "V_UP");
        stringMap.put(WEIGHTED_V_UP, "WEIGHTED_V_UP");
        stringMap.put(WEIGHTED_RUSSIAN_TWIST_ON_SWISS_BALL, "WEIGHTED_RUSSIAN_TWIST_ON_SWISS_BALL");
        stringMap.put(WEIGHTED_SIT_UP, "WEIGHTED_SIT_UP");
        stringMap.put(X_ABS, "X_ABS");
        stringMap.put(WEIGHTED_X_ABS, "WEIGHTED_X_ABS");
        stringMap.put(SIT_UP, "SIT_UP");
    }


    /**
     * Retrieves the String Representation of the Value
     * @param value The enum constant
     * @return The name of this enum contsant
     */
    public static String getStringFromValue( Integer value ) {
        if( stringMap.containsKey( value ) ) {
            return stringMap.get( value );
        }

        return "";
    }

    /**
     * Returns the enum constant with the specified name.
     * @param value The enum string value
     * @return The enum constant or INVALID if unknown
     */
    public static Integer getValueFromString( String value ) {
        for( Map.Entry<Integer, String> entry : stringMap.entrySet() ) {
            if( entry.getValue().equals( value ) ) {
                return entry.getKey();
            }
        }

        return INVALID;
    }

}
