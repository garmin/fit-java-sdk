/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.133.0Release
// Tag = production/release/21.133.0-0-g6002091
/////////////////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;



public class SplitSummaryMesg extends Mesg   {

    
    public static final int MessageIndexFieldNum = 254;
    
    public static final int SplitTypeFieldNum = 0;
    
    public static final int NumSplitsFieldNum = 3;
    
    public static final int TotalTimerTimeFieldNum = 4;
    
    public static final int TotalDistanceFieldNum = 5;
    
    public static final int AvgSpeedFieldNum = 6;
    
    public static final int MaxSpeedFieldNum = 7;
    
    public static final int TotalAscentFieldNum = 8;
    
    public static final int TotalDescentFieldNum = 9;
    
    public static final int AvgHeartRateFieldNum = 10;
    
    public static final int MaxHeartRateFieldNum = 11;
    
    public static final int AvgVertSpeedFieldNum = 12;
    
    public static final int TotalCaloriesFieldNum = 13;
    
    public static final int TotalMovingTimeFieldNum = 77;
    

    protected static final  Mesg splitSummaryMesg;
    static {
        // split_summary
        splitSummaryMesg = new Mesg("split_summary", MesgNum.SPLIT_SUMMARY);
        splitSummaryMesg.addField(new Field("message_index", MessageIndexFieldNum, 132, 1, 0, "", false, Profile.Type.MESSAGE_INDEX));
        
        splitSummaryMesg.addField(new Field("split_type", SplitTypeFieldNum, 0, 1, 0, "", false, Profile.Type.SPLIT_TYPE));
        
        splitSummaryMesg.addField(new Field("num_splits", NumSplitsFieldNum, 132, 1, 0, "", false, Profile.Type.UINT16));
        
        splitSummaryMesg.addField(new Field("total_timer_time", TotalTimerTimeFieldNum, 134, 1000, 0, "s", false, Profile.Type.UINT32));
        
        splitSummaryMesg.addField(new Field("total_distance", TotalDistanceFieldNum, 134, 100, 0, "m", false, Profile.Type.UINT32));
        
        splitSummaryMesg.addField(new Field("avg_speed", AvgSpeedFieldNum, 134, 1000, 0, "m/s", false, Profile.Type.UINT32));
        
        splitSummaryMesg.addField(new Field("max_speed", MaxSpeedFieldNum, 134, 1000, 0, "m/s", false, Profile.Type.UINT32));
        
        splitSummaryMesg.addField(new Field("total_ascent", TotalAscentFieldNum, 132, 1, 0, "m", false, Profile.Type.UINT16));
        
        splitSummaryMesg.addField(new Field("total_descent", TotalDescentFieldNum, 132, 1, 0, "m", false, Profile.Type.UINT16));
        
        splitSummaryMesg.addField(new Field("avg_heart_rate", AvgHeartRateFieldNum, 2, 1, 0, "bpm", false, Profile.Type.UINT8));
        
        splitSummaryMesg.addField(new Field("max_heart_rate", MaxHeartRateFieldNum, 2, 1, 0, "bpm", false, Profile.Type.UINT8));
        
        splitSummaryMesg.addField(new Field("avg_vert_speed", AvgVertSpeedFieldNum, 133, 1000, 0, "m/s", false, Profile.Type.SINT32));
        
        splitSummaryMesg.addField(new Field("total_calories", TotalCaloriesFieldNum, 134, 1, 0, "kcal", false, Profile.Type.UINT32));
        
        splitSummaryMesg.addField(new Field("total_moving_time", TotalMovingTimeFieldNum, 134, 1000, 0, "s", false, Profile.Type.UINT32));
        
    }

    public SplitSummaryMesg() {
        super(Factory.createMesg(MesgNum.SPLIT_SUMMARY));
    }

    public SplitSummaryMesg(final Mesg mesg) {
        super(mesg);
    }


    /**
     * Get message_index field
     *
     * @return message_index
     */
    public Integer getMessageIndex() {
        return getFieldIntegerValue(254, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set message_index field
     *
     * @param messageIndex The new messageIndex value to be set
     */
    public void setMessageIndex(Integer messageIndex) {
        setFieldValue(254, 0, messageIndex, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get split_type field
     *
     * @return split_type
     */
    public SplitType getSplitType() {
        Short value = getFieldShortValue(0, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
        if (value == null) {
            return null;
        }
        return SplitType.getByValue(value);
    }

    /**
     * Set split_type field
     *
     * @param splitType The new splitType value to be set
     */
    public void setSplitType(SplitType splitType) {
        setFieldValue(0, 0, splitType.value, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get num_splits field
     *
     * @return num_splits
     */
    public Integer getNumSplits() {
        return getFieldIntegerValue(3, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set num_splits field
     *
     * @param numSplits The new numSplits value to be set
     */
    public void setNumSplits(Integer numSplits) {
        setFieldValue(3, 0, numSplits, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get total_timer_time field
     * Units: s
     *
     * @return total_timer_time
     */
    public Float getTotalTimerTime() {
        return getFieldFloatValue(4, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set total_timer_time field
     * Units: s
     *
     * @param totalTimerTime The new totalTimerTime value to be set
     */
    public void setTotalTimerTime(Float totalTimerTime) {
        setFieldValue(4, 0, totalTimerTime, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get total_distance field
     * Units: m
     *
     * @return total_distance
     */
    public Float getTotalDistance() {
        return getFieldFloatValue(5, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set total_distance field
     * Units: m
     *
     * @param totalDistance The new totalDistance value to be set
     */
    public void setTotalDistance(Float totalDistance) {
        setFieldValue(5, 0, totalDistance, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get avg_speed field
     * Units: m/s
     *
     * @return avg_speed
     */
    public Float getAvgSpeed() {
        return getFieldFloatValue(6, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set avg_speed field
     * Units: m/s
     *
     * @param avgSpeed The new avgSpeed value to be set
     */
    public void setAvgSpeed(Float avgSpeed) {
        setFieldValue(6, 0, avgSpeed, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get max_speed field
     * Units: m/s
     *
     * @return max_speed
     */
    public Float getMaxSpeed() {
        return getFieldFloatValue(7, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set max_speed field
     * Units: m/s
     *
     * @param maxSpeed The new maxSpeed value to be set
     */
    public void setMaxSpeed(Float maxSpeed) {
        setFieldValue(7, 0, maxSpeed, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get total_ascent field
     * Units: m
     *
     * @return total_ascent
     */
    public Integer getTotalAscent() {
        return getFieldIntegerValue(8, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set total_ascent field
     * Units: m
     *
     * @param totalAscent The new totalAscent value to be set
     */
    public void setTotalAscent(Integer totalAscent) {
        setFieldValue(8, 0, totalAscent, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get total_descent field
     * Units: m
     *
     * @return total_descent
     */
    public Integer getTotalDescent() {
        return getFieldIntegerValue(9, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set total_descent field
     * Units: m
     *
     * @param totalDescent The new totalDescent value to be set
     */
    public void setTotalDescent(Integer totalDescent) {
        setFieldValue(9, 0, totalDescent, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get avg_heart_rate field
     * Units: bpm
     *
     * @return avg_heart_rate
     */
    public Short getAvgHeartRate() {
        return getFieldShortValue(10, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set avg_heart_rate field
     * Units: bpm
     *
     * @param avgHeartRate The new avgHeartRate value to be set
     */
    public void setAvgHeartRate(Short avgHeartRate) {
        setFieldValue(10, 0, avgHeartRate, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get max_heart_rate field
     * Units: bpm
     *
     * @return max_heart_rate
     */
    public Short getMaxHeartRate() {
        return getFieldShortValue(11, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set max_heart_rate field
     * Units: bpm
     *
     * @param maxHeartRate The new maxHeartRate value to be set
     */
    public void setMaxHeartRate(Short maxHeartRate) {
        setFieldValue(11, 0, maxHeartRate, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get avg_vert_speed field
     * Units: m/s
     *
     * @return avg_vert_speed
     */
    public Float getAvgVertSpeed() {
        return getFieldFloatValue(12, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set avg_vert_speed field
     * Units: m/s
     *
     * @param avgVertSpeed The new avgVertSpeed value to be set
     */
    public void setAvgVertSpeed(Float avgVertSpeed) {
        setFieldValue(12, 0, avgVertSpeed, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get total_calories field
     * Units: kcal
     *
     * @return total_calories
     */
    public Long getTotalCalories() {
        return getFieldLongValue(13, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set total_calories field
     * Units: kcal
     *
     * @param totalCalories The new totalCalories value to be set
     */
    public void setTotalCalories(Long totalCalories) {
        setFieldValue(13, 0, totalCalories, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Get total_moving_time field
     * Units: s
     *
     * @return total_moving_time
     */
    public Float getTotalMovingTime() {
        return getFieldFloatValue(77, 0, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

    /**
     * Set total_moving_time field
     * Units: s
     *
     * @param totalMovingTime The new totalMovingTime value to be set
     */
    public void setTotalMovingTime(Float totalMovingTime) {
        setFieldValue(77, 0, totalMovingTime, Fit.SUBFIELD_INDEX_MAIN_FIELD);
    }

}
